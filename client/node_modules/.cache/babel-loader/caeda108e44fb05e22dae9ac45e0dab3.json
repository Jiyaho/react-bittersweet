{"ast":null,"code":"import{useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import{useDispatch}from\"react-redux\";import{auth}from\"_actions/user_action\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function(SpecificComponent,option){var adminRoute=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;// 위 function의 3가지 Parameter를 App.js에 부여해주어 페이지 접근 권한을 설정해준다.\n// option의 3가지 선택지\n// 1. null: 아무나 출입 가능한 페이지\n// 2. true: 로그인한 유저만 출입 가능한 페이지\n// 3. false: 로그인한 유저는 출입 불가능한 페이지\n// adminRoute 선택지\n// 1. null: 아무나 출입 가능한 페이지 (default는 null로 설정)\n// 2. true: admin만 출입 가능한 페이지\nfunction AuthenticationCheck(){var dispatch=useDispatch();var navigate=useNavigate();useEffect(function(){dispatch(auth()).then(function(response){console.log(response);//로그인하지 않은 상태\nif(!response.payload.isAuth){if(option){navigate(\"/login\");}}else{//로그인을 한 상태\n//1. admin 권한이 없는 유저가 adminRoute를 접속하려 할 때.\n//2. 로그인한 유저가 출입 불가능한 페이지(LoginPage, RegisterPage)로 접근하려 할 때.\nif(adminRoute&&!response.payload.isAdmin){navigate(\"/\");}else{if(option===false){navigate(\"/\");}}}});},[]);return/*#__PURE__*/_jsx(SpecificComponent,{});}return AuthenticationCheck;}","map":{"version":3,"names":["useEffect","useNavigate","useDispatch","auth","SpecificComponent","option","adminRoute","AuthenticationCheck","dispatch","navigate","then","response","console","log","payload","isAuth","isAdmin"],"sources":["/Users/jiho/Desktop/dev/project/react-bittersweet/client/src/hoc/auth.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { auth } from \"_actions/user_action\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n  // 위 function의 3가지 Parameter를 App.js에 부여해주어 페이지 접근 권한을 설정해준다.\n\n  // option의 3가지 선택지\n  // 1. null: 아무나 출입 가능한 페이지\n  // 2. true: 로그인한 유저만 출입 가능한 페이지\n  // 3. false: 로그인한 유저는 출입 불가능한 페이지\n\n  // adminRoute 선택지\n  // 1. null: 아무나 출입 가능한 페이지 (default는 null로 설정)\n  // 2. true: admin만 출입 가능한 페이지\n\n  function AuthenticationCheck() {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n      dispatch(auth()).then((response) => {\n        console.log(response);\n        //로그인하지 않은 상태\n        if (!response.payload.isAuth) {\n          if (option) {\n            navigate(\"/login\");\n          }\n        } else {\n          //로그인을 한 상태\n          //1. admin 권한이 없는 유저가 adminRoute를 접속하려 할 때.\n          //2. 로그인한 유저가 출입 불가능한 페이지(LoginPage, RegisterPage)로 접근하려 할 때.\n          if (adminRoute && !response.payload.isAdmin) {\n            navigate(\"/\");\n          } else {\n            if (option === false) {\n              navigate(\"/\");\n            }\n          }\n        }\n      });\n    }, []);\n    return <SpecificComponent />;\n  }\n  return AuthenticationCheck;\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,WAAW,KAAQ,aAAa,CACzC,OAASC,IAAI,KAAQ,sBAAsB,CAAC,2CAE5C,cAAe,UAAUC,iBAAiB,CAAEC,MAAM,CAAqB,IAAnBC,WAAU,2DAAG,IAAI,CACnE;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,QAASC,oBAAmB,EAAG,CAC7B,GAAMC,SAAQ,CAAGN,WAAW,EAAE,CAC9B,GAAMO,SAAQ,CAAGR,WAAW,EAAE,CAE9BD,SAAS,CAAC,UAAM,CACdQ,QAAQ,CAACL,IAAI,EAAE,CAAC,CAACO,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,CACrB;AACA,GAAI,CAACA,QAAQ,CAACG,OAAO,CAACC,MAAM,CAAE,CAC5B,GAAIV,MAAM,CAAE,CACVI,QAAQ,CAAC,QAAQ,CAAC,CACpB,CACF,CAAC,IAAM,CACL;AACA;AACA;AACA,GAAIH,UAAU,EAAI,CAACK,QAAQ,CAACG,OAAO,CAACE,OAAO,CAAE,CAC3CP,QAAQ,CAAC,GAAG,CAAC,CACf,CAAC,IAAM,CACL,GAAIJ,MAAM,GAAK,KAAK,CAAE,CACpBI,QAAQ,CAAC,GAAG,CAAC,CACf,CACF,CACF,CACF,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CACN,mBAAO,KAAC,iBAAiB,IAAG,CAC9B,CACA,MAAOF,oBAAmB,CAC5B"},"metadata":{},"sourceType":"module"}