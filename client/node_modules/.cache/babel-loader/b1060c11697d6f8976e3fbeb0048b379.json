{"ast":null,"code":"var _jsxFileName = \"/Users/jiho/Desktop/dev/project/react-bittersweet/client/src/hoc/auth.js\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function (SpecificComponent, option) {\n  var _s = $RefreshSig$();\n  let adminRoute = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // 위 function의 3가지 Parameter를 App.js에 부여해주어 페이지 접근 권한을 설정해준다.\n\n  // adminRoute 선택지\n  // 1. null: 아무나 출입 가능한 페이지 (default는 null로 설정)\n  // 2. true: admin만 출입 가능한 페이지\n\n  // option의 3가지 선택지\n  // 1. null: 아무나 출입 가능한 페이지\n  // 2. true: 로그인한 유저만 출입 가능한 페이지\n  // 3. false: 로그인한 유저는 출입 불가능한 페이지\n\n  function AuthenticationCheck() {\n    _s();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    useEffect(() => {\n      dispatch(auth()).then(response => {\n        console.log(response);\n        //로그인하지 않은 상태\n        if (!response.payload.isAuth) {\n          if (option) {\n            navigate(\"/login\");\n          }\n        } else {\n          //로그인을 한 상태\n          //1. admin 권한이 없는 유저가 adminRoute를 접속하려 할 때.\n          //2. 로그인한 유저가 출입 불가능한 페이지(LoginPage, RegisterPage)로 접근하려 할 때.\n          if (adminRoute && !response.payload.isAdmin) {\n            navigate(\"/\");\n          } else {\n            if (option === false) {\n              navigate(\"/\");\n            }\n          }\n        }\n      });\n    }, []);\n    return /*#__PURE__*/_jsxDEV(SpecificComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n  _s(AuthenticationCheck, \"s5YDugppCHA/sTog5Ue+JVWibms=\", false, function () {\n    return [useDispatch, useNavigate];\n  });\n  return AuthenticationCheck;\n}","map":{"version":3,"names":["useEffect","useNavigate","useDispatch","SpecificComponent","option","adminRoute","AuthenticationCheck","dispatch","navigate","auth","then","response","console","log","payload","isAuth","isAdmin"],"sources":["/Users/jiho/Desktop/dev/project/react-bittersweet/client/src/hoc/auth.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n  // 위 function의 3가지 Parameter를 App.js에 부여해주어 페이지 접근 권한을 설정해준다.\n\n  // adminRoute 선택지\n  // 1. null: 아무나 출입 가능한 페이지 (default는 null로 설정)\n  // 2. true: admin만 출입 가능한 페이지\n\n  // option의 3가지 선택지\n  // 1. null: 아무나 출입 가능한 페이지\n  // 2. true: 로그인한 유저만 출입 가능한 페이지\n  // 3. false: 로그인한 유저는 출입 불가능한 페이지\n\n  function AuthenticationCheck() {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n      dispatch(auth()).then((response) => {\n        console.log(response);\n        //로그인하지 않은 상태\n        if (!response.payload.isAuth) {\n          if (option) {\n            navigate(\"/login\");\n          }\n        } else {\n          //로그인을 한 상태\n          //1. admin 권한이 없는 유저가 adminRoute를 접속하려 할 때.\n          //2. 로그인한 유저가 출입 불가능한 페이지(LoginPage, RegisterPage)로 접근하려 할 때.\n          if (adminRoute && !response.payload.isAdmin) {\n            navigate(\"/\");\n          } else {\n            if (option === false) {\n              navigate(\"/\");\n            }\n          }\n        }\n      });\n    }, []);\n    return <SpecificComponent />;\n  }\n  return AuthenticationCheck;\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,aAAa;AAAC;AAE1C,eAAe,UAAUC,iBAAiB,EAAEC,MAAM,EAAqB;EAAA;EAAA,IAAnBC,UAAU,uEAAG,IAAI;EACnE;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,SAASC,mBAAmB,GAAG;IAAA;IAC7B,MAAMC,QAAQ,GAAGL,WAAW,EAAE;IAC9B,MAAMM,QAAQ,GAAGP,WAAW,EAAE;IAE9BD,SAAS,CAAC,MAAM;MACdO,QAAQ,CAACE,IAAI,EAAE,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QAClCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;QACrB;QACA,IAAI,CAACA,QAAQ,CAACG,OAAO,CAACC,MAAM,EAAE;UAC5B,IAAIX,MAAM,EAAE;YACVI,QAAQ,CAAC,QAAQ,CAAC;UACpB;QACF,CAAC,MAAM;UACL;UACA;UACA;UACA,IAAIH,UAAU,IAAI,CAACM,QAAQ,CAACG,OAAO,CAACE,OAAO,EAAE;YAC3CR,QAAQ,CAAC,GAAG,CAAC;UACf,CAAC,MAAM;YACL,IAAIJ,MAAM,KAAK,KAAK,EAAE;cACpBI,QAAQ,CAAC,GAAG,CAAC;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;IACN,oBAAO,QAAC,iBAAiB;MAAA;MAAA;MAAA;IAAA,QAAG;EAC9B;EAAC,GA3BQF,mBAAmB;IAAA,QACTJ,WAAW,EACXD,WAAW;EAAA;EA0B9B,OAAOK,mBAAmB;AAC5B"},"metadata":{},"sourceType":"module"}